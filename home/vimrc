""" ======================
""" Use Vim settings, rather then Vi settings (much better!).
""" This must be first, because it changes other options as a side effect.
set nocompatible
set autoread
" display incomplete commands
set showcmd
" Don't redraw while executing macros
set lazyredraw

set nocursorline

" Show matching brackets when text indicator is over them
set showmatch

"=========Backup and restoring 
set dir=./.backup,~/.vim/backup_files,/tmp
silent execute '!mkdir -p $HOME/.vim/tmp/{backup,swap,view,undo}'
set backupdir=$HOME/.vim/tmp/backup/
set backup
set directory=$HOME/.vim/tmp/swap/
set viewdir=$HOME/.vim/tmp/view/
" store undo files, undo edits after deleting a buffer
"set undodir=$HOME/.vim/tmp/undo/
"set undofile
set viminfo='50,n$HOME/.vim/tmp/viminfo

"Change buffer - without saving
set hid

scriptencoding utf-8
set termencoding=utf-8
set encoding=utf-8
set backspace=indent,eol,start
" show the cursor position all the time
set ruler

let mapleader = ","
let g:mapleader = ","

" Search options
" Blinks underscore of search result
function! HLNext (blinktime)
  set invcursorline
  redraw
  exec 'sleep ' . float2nr(a:blinktime * 250) . 'm'
  set invcursorline
  redraw
endfunction

nnoremap <silent> n n:call HLNext(0.4)<cr>
nnoremap <silent> N N:call HLNext(0.4)<cr>

" do incremental searching
set incsearch

set ignorecase
set smartcase
set hlsearch

set nu
if has("syntax")
    syntax on
endif


filetype plugin indent on
" Indentation 
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
"  Switching indentation schema
nmap \t :set expandtab tabstop=4 shiftwidth=4 softtabstop=4<CR>
nmap \T :set expandtab tabstop=8 shiftwidth=8 softtabstop=4<CR>
nmap \M :set noexpandtab tabstop=8 softtabstop=4 shiftwidth=4<CR>
nmap \m :set expandtab tabstop=2 shiftwidth=2 softtabstop=2<CR>

set smartindent
set autoindent

" sudo omission fix
cmap w!! w !sudo tee >/dev/null %

" Highlight empty white spaces at the right
"highlight WhiteSpaceEOL ctermbg=darkred guibg=lightred
"match WhiteSpaceEOL /\s\+$/
"   Testing new highlight for white spaces
exec "set listchars=tab:\uBB\uBB,trail:\uB7,nbsp:~"
set list
" Reload vimrc
map <leader>e :e! ~/.vimrc<cr>

"========Plug-ins
call pathogen#infect()
set runtimepath^=~/.vim/bundle/ctrlp.vim

"========Custom Keystrokes

"=== Disable arrow keys
inoremap  <Up>     <NOP>
inoremap  <Down>   <NOP>
inoremap  <Left>   <NOP>
inoremap  <Right>  <NOP>
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

"========Custom Keystrokes
"== Ctrl-P
" Initiate Ctrl-P
nmap ; :CtrlPBuffer<CR>

"== NerdTree
" Initiate NerdTree
nmap <leader>f :NERDTreeToggle<CR>
let g:NERDTreeDirArrows=0
let NERDTreeShowHidden=1
" AutoClose NerdTree after file is open
let NERDTreeQuitOnOpen = 1

"== Powrline
let g:Powerline_symbols = 'fancy'
" FIXES The statusline is hidden/only appears in split windows!
set laststatus=2



"== Clear search highlights
nmap \q :nohlsearch<CR>
"== Switch to next buffer
nmap <C-e> :e#<CR>
"set ff=dos,unix Change file format to avoid ^M line breaks also
"replacing ^M's :%s/CTRL-v ENTER//g

"Alternative Insert Mode exit
imap jj <Esc>
imap ii <Esc>

"Enable spell check and text with on git commits by default
autocmd Filetype gitcommit setlocal spell textwidth=72
if $TERM == "xterm-256color" || $TERM == "screen-256color" || $COLORTERM == "gnome-terminal"
      set t_Co=256
endif

if version >= 703
 highlight ColorColumn ctermbg=magenta
 call matchadd('ColorColumn', '\%81v', 100)
endif
