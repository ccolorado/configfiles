extends solidity

snippet newC "popultes contract with template"
// SPDX-License-Identifier: ${3:MIT}
// ${4:pragma solidity ^0.8.9;}

/**
 * ${2:Contract Description}
 */

contract $1 {

    // StateVariables
    uint256 public variableName;

    // Events
    event SampleEvent(address indexed owner, uint256 indexed txId);

    // SolTemplate: Constructor
    constructor($5) {
    }

    // SolTemplate: Modifiers(modi)

    //  Functions >
    // Trnasaction Functions: (func)

    // External Functions

    // View functionsFunctions (pv)


    // Internal functions


    // Private functions

}

endsnippet

snippet w "log line number"
console.log("<-- `!v @%`: `!v v:lnum`");
endsnippet

snippet @w "pint line number"
console.log("<-- `!v @%`: `!v v:lnum`: %s", ${1});
endsnippet

# snippet w "pint line number" b
# console.log(`!v v:lnum`,"`!v @%`");
# endsnippet

snippet pv "Proxy view function"
function $1($3) public view returns($2) {
    return ${4:BLKStorage}.$1(${5:$3});
}

endsnippet

snippet @p "Natspec param"
/// @param ${1:name} ${2:description}
@p$3
endsnippet

snippet @n "Natspec template"
/// @notice ${1: does something}
/// @dev $2
@p$3
/// @return
endsnippet

# Taken https://www.reddit.com/r/ethereum/comments/40yhzw/solidity_snippets_in_vim_ultisnips_format/
# pragma solidity ^0.5.2$1;
# Keywords
snippet pgm
pragma solidity ^0.${1:7.0};
endsnippet

snippet cont "Contract" b
contract $1 {
    $2
}
endsnippet

snippet conta "Contract with some standard features" b
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.${1:7.0};

contract $1 {
    $4
    address public owner;

    constructor($2) public{
        owner = msg.sender;
        $3
    }

    function remove() {
        if(msg.sender == owner) {
            selfdestruct(owner);
        }
    }

    function () public{ revert('default revert'); }
}
endsnippet

snippet pu "public RW"
public
endsnippet

snippet pr "private RW"
private
endsnippet

snippet in "internal RW"
internal
endsnippet

snippet t "true RW"
true
endsnippet

snippet f "false RW"
false
endsnippet

snippet dl "delete"
delete $1;
endsnippet

snippet rt "return"
return $1;
endsnippet

snippet rts "returns RW"
returns
endsnippet

snippet co "constant RW"
constant
endsnippet

snippet im "" b
import "$1";
endsnippet

snippet tr "throw"
throw;
endsnippet

snippet sd "selfdestruct"
selfdestruct($1);
endsnippet

snippet new
$1 = new $2($3);
endsnippet

snippet ev "event" b
event $1($2);
endsnippet

# Variables and data structures
snippet ui
uint256 $1;
endsnippet

snippet upvar
uint256 public $1;
endsnippet

snippet uip
uint256 public $1;
endsnippet

snippet ipvar
int256 public $1;
endsnippet

snippet ivar
int256 $1;
endsnippet

snippet bvar "string"
bool $1;
endsnippet

snippet bpvar "string"
bool public $1;
endsnippet

snippet svar "string"
string $1;
endsnippet

snippet spvar "string"
string public $1;
endsnippet

snippet struct "" b
struct $1 {
    $2
}
endsnippet

snippet stru "" b
struct $1 {
    $2
}
endsnippet

snippet en "" b
enum $1 { $2 };
endsnippet

snippet adr "" b
address $1;
endsnippet

snippet ad
address
endsnippet

snippet adrp "" b
address public $1;
endsnippet

snippet mp "" b
mapping ($1 => $2) $3;
endsnippet

snippet mpp "public mapping" b
mapping ($1 => $2) public $3;
endsnippet

snippet func "" b
$9
function $1($2) ${3:public} ${4:view} {$5:modifier} ${6:returns($7)}{
    $8
}
endsnippet





snippet desc "" b
${1:public} ${2:view} ${3:modifier()} ${4:returns($5)}{
endsnippet


snippet funm "Function with modifier" b
function $1($2)
$3($4)
{
  $5
}
endsnippet

snippet funr "Function with returns" b
function $1($2) returns ($3){
  $4
	return $3
}
endsnippet

snippet mod "" b
modifier $1($2) {
    $3
    _;
}
endsnippet

snippet modi "modifier with if" b
modifier $1($2) {
    if ($3) {
	$4
    }
    _
}
endsnippet

snippet modst "modifier in a certain taste"
modifier inState(State _state) {
  if (state != _state) revert();
  _
}
endsnippet

snippet modre "modifier test of condition"
modifier require (bool condition) {
  if (!_condition) revert('$1');
  _
}
endsnippet

# Conditionals
snippet if "" b
if ($1) {
    $2
}
endsnippet

snippet el "" b
else {
    $1
}
endsnippet

snippet ife ""
if ($1) {
  $2
} else {
  $3
}
endsnippet

# Loops
snippet fr "standard for"
for($1) {
    $2
}
endsnippet

snippet for "incrementing for loop" b
for(uint $1 = $2; $1 < $3; $1++) {
    $4
}
endsnippet

snippet fori "For with counter" b
for (uint i = 0; i < $1; i++) {
    $2
}
endsnippet

# Custom variables
snippet ms "sender" i
msg.sender
endsnippet

snippet mv "value"
msg.value
endsnippet

snippet mg "gas"
msg.gas
endsnippet

snippet md "data"
msg.data
endsnippet

snippet blc "coinbase"
block.coinbase
endsnippet

snippet bld "difficulty"
block.difficulty
endsnippet

snippet blg "gaslimit"
block.gaslimit
endsnippet

snippet bln "number"
block.number
endsnippet

snippet blb "blockhash"
block.blockhash
endsnippet

snippet blt "timestamp"
block.timestamp
endsnippet

snippet txg "gasprice"
tx.gasprise
endsnippet

snippet txo "origin"
tx.origin
endsnippet

snippet sto "default storage map"
storage[$1] $2
endsnippet

# Common design patterns
snippet funt "standard contract throw function" b
function () { throw; }
endsnippet

snippet ifs "check if a send went through"
if($1.send($2)) {
    $3
}
endsnippet

snippet snd "send ether"
$1.send($2);
endsnippet

snippet psh "push into an array"
$1.push($2);
endsnippet

snippet evli "Event Listener" b
$1.$2().watch({}, '', function(error, result) {
    if (!error) {
    $3
    }
}
endsnippet

# Crypto
snippet sh3 "sha3"
sha3($1);
endsnippet

snippet sh2 "sha256"
sha256($2);
endsnippet
