extends javascript

snippet hhdeploy "Deploys a contract with hardhat"
let ${1}Factory = await ethers.getContractFactory(
		'${3:contacts/filename:}${2:DummyERC721}') //, deployer_address);
this.$1Contract = await $1Factory.deploy(${3});
endsnippet

snippet expc "failing chai expect"
expect(${1:true}).to.be.equal(${2:false});
endsnippet

snippet exprev "expect revert"
await expect(
	${1}
).to.be.revertedWith('$2');
endsnippet

snippet fori "for i loop" b
for(let $2 = 0; i < $1.length; $2++) {
	let item = $1[$2]
}
endsnippet

snippet 18z "inserts 1 eth in wei"
${1:1}000000000000000000
endsnippet

snippet pstb "toFunc"
await this.signingUtil.postRequest(
  this.CBLKStorage, this.postBetObject, this.privk.maker, this.privk.adminA,
  { from: this.addr.${1:taker}, gas: 6721975 }
).should.be.fulfilled

endsnippet

snippet tofunc "toFunc"
${1:funcitonName}({

    ${VISUAL}
})

endsnippet


# try { /* eslint-disable indent */
snippet try "try/catch"
try {

    ${VISUAL}$1

} catch (e) {
    console.log(e)
    process.exit(111)
}

endsnippet

# Printing
# console.log('${4:$1 $2}', await ${1}.${2}($3))
snippet cl "await contract call console log with tag" b
console.log('${2:$1} : ', ${1})
endsnippet

# Printing
snippet clb "await contract call BN.toFixed() console log with tag" b
console.log('${6:$1 $2} `!v v:lnum`', ${4:toBN(} await ${1}.${2}($3)${5:).toFixed()})
endsnippet

snippet w "pint line number" b
console.log(`!v v:lnum`,"`!v @%`");
endsnippet

snippet cjs "JSON stringify"
console.log('${2:$1} : ', JSON.stringify(${1}, null, 2))
endsnippet

snippet wc "web3 contract call"
const _$5 = await $6this.${3:contract}.${4:methods.}$1($2).call()

endsnippet

snippet ws "web3 contract succesfull send"
await $6this.${4:contract}.${5:methods.}$1($3).send({
  from: $2,
  gas: ${7:6721975}
}).should.be.fulfilled

endsnippet

snippet wsr "web3 contract succesfull send"
await $6this.${4:contract}.${5:methods.}$1($3).send({
  from: $2,
  gas: ${8:6721975}
}).should.be.rejectedWith(
  Error,
  "$7"
)

endsnippet

snippet itp "class property should be equals to variable"
it('$1 is $2', async function () {
  const _$1 = await this.$3.$1()
  _$1.should.be.equal($2)
})

endsnippet

snippet ite "new testcase should equals"
it('$1', async function () {
  const ${2:expectedValue} = $4
  const ${3:resultingValue} = $5
  $3.should.be.equal(${6:$2})
})

endsnippet

snippet it "new testcase should equals"
it('$1', async function () {
  ${2:false}.should.be.equal(${3:true})
})

endsnippet

snippet dec "describe('X', async function () {Y})"
describe('$1', async function () {
  $2
})
endsnippet

snippet desc "Describe.only, before each, it.only"

describe${3:.only}('$1', async function () {

  beforeEach(async function () {
    $5
  })

  it${4:.only}('$2', async function () {
    false.should.be.equal(true)
  })

})
endsnippet


# Import Component
snippet imrc "import React, {Component} from 'react';"
import React${1:, {Component} }from 'react';

endsnippet

# Component Class
snippet cc "Component class"
class ${1:MyComponent} extends Component {
	state = {}
	render() {
		return (
			<${2:div}>
				${0: $1 Placeholder}
			</$2>
		)
	}
}


export default $1;
endsnippet
# 
snippet sfc "Stateless Functional Component"
const ${1:MyComponent} = (props) => {
	return(
		<${2:<React.Fragment}>
      $0
		</$2>
	);
}


export default $1;
endsnippet

snippet arf "Arrow Function name = (arg) => { "
${1:myFunction} = (${2}) => {
	${0:${VISUAL}}
};
endsnippet

snippet iarf "iterating arrow funciton {name(arg => {"
{${1:subjec}(${2:item} => (
	${0:${VISUAL}}
))}
endsnippet

snippet sbe
${2:false}.should.be.equal(${1:true})
endsnippet

snippet snbe
${2:fasle}.should.not.be.equal(${1:true})
endsnippet

snippet sbf
.should.be.fulfilled
endsnippet

snippet sbr
.should.be.rejectedWith(
  Error,
  "$1"
)

endsnippet
